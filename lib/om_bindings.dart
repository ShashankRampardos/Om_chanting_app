// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Dart bindings for native OM detection logic
class OmBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  OmBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  OmBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  int detect_om(
    ffi.Pointer<ffi.Float> samples,
    int length,
    ffi.Pointer<ffi.Double> peakFreq,
    ffi.Pointer<ffi.Double> peakMag,
  ) {
    return _detect_om(samples, length, peakFreq, peakMag);
  }

  late final _detect_omPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Float>,
            ffi.Int,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<ffi.Double>,
          )
        >
      >('detect_om');
  late final _detect_om = _detect_omPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
        )
      >();
}
